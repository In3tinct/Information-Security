
#Given is p,q,e and c 

p=8695224115036335558506571119739296036271134788610181138168484331081777972517240308721981280176995392696427341397469232176120700610749965333026113898553049L

q=13096749823995628078930936161926731366955083380107539950861609990671457149850288846976369982960384583841424977220385144435351119887497145134804975486079751L

c=89801389443569569957398406954707598492763923418568536030323546088278758362331043119736437910117697032594835902900582040394367480829800897231925233807745278389358031404278064633313626149336724945854865041439061149411962509247624419448003604874406282213609341704339025169015256228029200222643343430028828063008L

def gcd(p1, p2):
    while p1 != 0:
        p1, p2 = p2 % p1, p1
    return p2


def modInverse(p1, m):

    #Checking if p1 and M are relatively prime if not then there could be no mod inverse
    if gcd(p1, m) != 1:
        return None

    par1, par2, par3 = 1, 0, p1
    par4, par5, par6 = 0, 1, m
    while par6 != 0:
        q = par3 // par6 # // is the integer division operator
        par4, par5, par6, par1, par2, par3 = (par1 - q * par4), (par2 - q * par5), (par3 - q * par6), par4, par5, par6
    return par1 % m

e=76629781387397242664311670987431757827144139255639280752983416867031015307352014386648673994217913815581782186636488159185965227449303118783362862435899486717504457233649829563176353949817149997773276435581910370559594639570436120596211148973227077565739467641309426944529006537681147498322988959979899800641L

#(p-1)(q-1)
phi=113879174898204668645967117693806176653947255938239415762484178439933029039942480992378962821742116042132121384130894271263769392129728556897504506961994017955123040971580601442184360016812839790442396284478491372064164135562688743361218171760976043299103524775029410660424153739004151075556359093990933578000L

modulus=113879174898204668645967117693806176653947255938239415762484178439933029039942480992378962821742116042132121384130894271263769392129728556897504506961994039747096980003544238879691641682840243016660565002199580402158485888797811110890373870112239180679080062627348028514800765210824649322666826925080318210799L

d= modInverse(e,phi)

print "Decryption key"
print d

result=pow(c,d,modulus)
print "Result"
print result
hexresult=hex(result)[2:-1]
hextoascii=str(hexresult).decode("hex")
print hextoascii
